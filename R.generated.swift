//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 10 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `SF UI Display Regular.ttf`.
    static let sfuiDisplayRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF UI Display Regular", pathExtension: "ttf")
    /// Resource file `sf-ui-display-black-58646a6b80d5a.otf`.
    static let sfUiDisplayBlack58646a6b80d5aOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "sf-ui-display-black-58646a6b80d5a", pathExtension: "otf")
    /// Resource file `sf-ui-display-bold-58646a511e3d9.otf`.
    static let sfUiDisplayBold58646a511e3d9Otf = Rswift.FileResource(bundle: R.hostingBundle, name: "sf-ui-display-bold-58646a511e3d9", pathExtension: "otf")
    /// Resource file `sf-ui-display-heavy-586470160b9e5.otf`.
    static let sfUiDisplayHeavy586470160b9e5Otf = Rswift.FileResource(bundle: R.hostingBundle, name: "sf-ui-display-heavy-586470160b9e5", pathExtension: "otf")
    /// Resource file `sf-ui-display-light-58646b33e0551.otf`.
    static let sfUiDisplayLight58646b33e0551Otf = Rswift.FileResource(bundle: R.hostingBundle, name: "sf-ui-display-light-58646b33e0551", pathExtension: "otf")
    /// Resource file `sf-ui-display-medium-58646be638f96.otf`.
    static let sfUiDisplayMedium58646be638f96Otf = Rswift.FileResource(bundle: R.hostingBundle, name: "sf-ui-display-medium-58646be638f96", pathExtension: "otf")
    /// Resource file `sf-ui-display-semibold-58646eddcae92.otf`.
    static let sfUiDisplaySemibold58646eddcae92Otf = Rswift.FileResource(bundle: R.hostingBundle, name: "sf-ui-display-semibold-58646eddcae92", pathExtension: "otf")
    /// Resource file `sf-ui-display-thin-58646e9b26e8b.otf`.
    static let sfUiDisplayThin58646e9b26e8bOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "sf-ui-display-thin-58646e9b26e8b", pathExtension: "otf")
    /// Resource file `sf-ui-display-ultralight-58646b19bf205.otf`.
    static let sfUiDisplayUltralight58646b19bf205Otf = Rswift.FileResource(bundle: R.hostingBundle, name: "sf-ui-display-ultralight-58646b19bf205", pathExtension: "otf")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF UI Display Regular", withExtension: "ttf")`
    static func sfuiDisplayRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfuiDisplayRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sf-ui-display-black-58646a6b80d5a", withExtension: "otf")`
    static func sfUiDisplayBlack58646a6b80d5aOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfUiDisplayBlack58646a6b80d5aOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sf-ui-display-bold-58646a511e3d9", withExtension: "otf")`
    static func sfUiDisplayBold58646a511e3d9Otf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfUiDisplayBold58646a511e3d9Otf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sf-ui-display-heavy-586470160b9e5", withExtension: "otf")`
    static func sfUiDisplayHeavy586470160b9e5Otf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfUiDisplayHeavy586470160b9e5Otf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sf-ui-display-light-58646b33e0551", withExtension: "otf")`
    static func sfUiDisplayLight58646b33e0551Otf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfUiDisplayLight58646b33e0551Otf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sf-ui-display-medium-58646be638f96", withExtension: "otf")`
    static func sfUiDisplayMedium58646be638f96Otf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfUiDisplayMedium58646be638f96Otf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sf-ui-display-semibold-58646eddcae92", withExtension: "otf")`
    static func sfUiDisplaySemibold58646eddcae92Otf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfUiDisplaySemibold58646eddcae92Otf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sf-ui-display-thin-58646e9b26e8b", withExtension: "otf")`
    static func sfUiDisplayThin58646e9b26e8bOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfUiDisplayThin58646e9b26e8bOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sf-ui-display-ultralight-58646b19bf205", withExtension: "otf")`
    static func sfUiDisplayUltralight58646b19bf205Otf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfUiDisplayUltralight58646b19bf205Otf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 9 fonts.
  struct font: Rswift.Validatable {
    /// Font `SFUIDisplay-Black`.
    static let sfuiDisplayBlack = Rswift.FontResource(fontName: "SFUIDisplay-Black")
    /// Font `SFUIDisplay-Bold`.
    static let sfuiDisplayBold = Rswift.FontResource(fontName: "SFUIDisplay-Bold")
    /// Font `SFUIDisplay-Heavy`.
    static let sfuiDisplayHeavy = Rswift.FontResource(fontName: "SFUIDisplay-Heavy")
    /// Font `SFUIDisplay-Light`.
    static let sfuiDisplayLight = Rswift.FontResource(fontName: "SFUIDisplay-Light")
    /// Font `SFUIDisplay-Medium`.
    static let sfuiDisplayMedium = Rswift.FontResource(fontName: "SFUIDisplay-Medium")
    /// Font `SFUIDisplay-Regular`.
    static let sfuiDisplayRegular = Rswift.FontResource(fontName: "SFUIDisplay-Regular")
    /// Font `SFUIDisplay-Semibold`.
    static let sfuiDisplaySemibold = Rswift.FontResource(fontName: "SFUIDisplay-Semibold")
    /// Font `SFUIDisplay-Thin`.
    static let sfuiDisplayThin = Rswift.FontResource(fontName: "SFUIDisplay-Thin")
    /// Font `SFUIDisplay-Ultralight`.
    static let sfuiDisplayUltralight = Rswift.FontResource(fontName: "SFUIDisplay-Ultralight")

    /// `UIFont(name: "SFUIDisplay-Black", size: ...)`
    static func sfuiDisplayBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayBlack, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Bold", size: ...)`
    static func sfuiDisplayBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayBold, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Heavy", size: ...)`
    static func sfuiDisplayHeavy(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayHeavy, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Light", size: ...)`
    static func sfuiDisplayLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayLight, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Medium", size: ...)`
    static func sfuiDisplayMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayMedium, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Regular", size: ...)`
    static func sfuiDisplayRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayRegular, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Semibold", size: ...)`
    static func sfuiDisplaySemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplaySemibold, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Thin", size: ...)`
    static func sfuiDisplayThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayThin, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Ultralight", size: ...)`
    static func sfuiDisplayUltralight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayUltralight, size: size)
    }

    static func validate() throws {
      if R.font.sfuiDisplayBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Black' could not be loaded, is 'sf-ui-display-black-58646a6b80d5a.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Bold' could not be loaded, is 'sf-ui-display-bold-58646a511e3d9.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Heavy' could not be loaded, is 'sf-ui-display-heavy-586470160b9e5.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Light' could not be loaded, is 'sf-ui-display-light-58646b33e0551.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Medium' could not be loaded, is 'sf-ui-display-medium-58646be638f96.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Regular' could not be loaded, is 'SF UI Display Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplaySemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Semibold' could not be loaded, is 'sf-ui-display-semibold-58646eddcae92.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Thin' could not be loaded, is 'sf-ui-display-thin-58646e9b26e8b.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayUltralight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Ultralight' could not be loaded, is 'sf-ui-display-ultralight-58646b19bf205.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 16 images.
  struct image {
    /// Image `AppleLogo`.
    static let appleLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "AppleLogo")
    /// Image `CarIcon`.
    static let carIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "CarIcon")
    /// Image `GoOutIcon`.
    static let goOutIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "GoOutIcon")
    /// Image `GoogleLogo`.
    static let googleLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "GoogleLogo")
    /// Image `LaunchScreenImage`.
    static let launchScreenImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "LaunchScreenImage")
    /// Image `PlacesListIconTabBarSelected`.
    static let placesListIconTabBarSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "PlacesListIconTabBarSelected")
    /// Image `PlacesListIconTabBarUnSelectred`.
    static let placesListIconTabBarUnSelectred = Rswift.ImageResource(bundle: R.hostingBundle, name: "PlacesListIconTabBarUnSelectred")
    /// Image `ProfileIconTabBarSelected`.
    static let profileIconTabBarSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ProfileIconTabBarSelected")
    /// Image `ProfileIconTabBarUnSelected`.
    static let profileIconTabBarUnSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ProfileIconTabBarUnSelected")
    /// Image `WishIcon`.
    static let wishIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "WishIcon")
    /// Image `arrowIcon`.
    static let arrowIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrowIcon")
    /// Image `compasIcon`.
    static let compasIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "compasIcon")
    /// Image `selectedHeart`.
    static let selectedHeart = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectedHeart")
    /// Image `unSelectedHeart`.
    static let unSelectedHeart = Rswift.ImageResource(bundle: R.hostingBundle, name: "unSelectedHeart")
    /// Image `xMarkIcon`.
    static let xMarkIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "xMarkIcon")
    /// Image `youtubeIcon`.
    static let youtubeIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "youtubeIcon")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AppleLogo", bundle: ..., traitCollection: ...)`
    static func appleLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appleLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CarIcon", bundle: ..., traitCollection: ...)`
    static func carIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GoOutIcon", bundle: ..., traitCollection: ...)`
    static func goOutIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goOutIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GoogleLogo", bundle: ..., traitCollection: ...)`
    static func googleLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.googleLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LaunchScreenImage", bundle: ..., traitCollection: ...)`
    static func launchScreenImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchScreenImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PlacesListIconTabBarSelected", bundle: ..., traitCollection: ...)`
    static func placesListIconTabBarSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placesListIconTabBarSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PlacesListIconTabBarUnSelectred", bundle: ..., traitCollection: ...)`
    static func placesListIconTabBarUnSelectred(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placesListIconTabBarUnSelectred, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ProfileIconTabBarSelected", bundle: ..., traitCollection: ...)`
    static func profileIconTabBarSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileIconTabBarSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ProfileIconTabBarUnSelected", bundle: ..., traitCollection: ...)`
    static func profileIconTabBarUnSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileIconTabBarUnSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WishIcon", bundle: ..., traitCollection: ...)`
    static func wishIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wishIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrowIcon", bundle: ..., traitCollection: ...)`
    static func arrowIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "compasIcon", bundle: ..., traitCollection: ...)`
    static func compasIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.compasIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selectedHeart", bundle: ..., traitCollection: ...)`
    static func selectedHeart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectedHeart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unSelectedHeart", bundle: ..., traitCollection: ...)`
    static func unSelectedHeart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unSelectedHeart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "xMarkIcon", bundle: ..., traitCollection: ...)`
    static func xMarkIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xMarkIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "youtubeIcon", bundle: ..., traitCollection: ...)`
    static func youtubeIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.youtubeIcon, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localized` struct is generated, and contains static references to 11 localization keys.
    struct localized {
      /// Value: Apple ID
      static let authAppleID = Rswift.StringResource(key: "auth.appleID", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Google
      static let authGoogle = Rswift.StringResource(key: "auth.google", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: iGid
      static let iGid = Rswift.StringResource(key: "iGid", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Выберите поездку
      static let placesSelectRide = Rswift.StringResource(key: "places.selectRide", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Выйти
      static let profileGoOut = Rswift.StringResource(key: "profile.goOut", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Избранные поездки
      static let profileWishList = Rswift.StringResource(key: "profile.wishList", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Места
      static let tabBarPlaces = Rswift.StringResource(key: "tabBar.places", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Назад
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Начните с помощью
      static let authGetStartedWith = Rswift.StringResource(key: "auth.getStartedWith", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Предложить поездку
      static let profileAddPlace = Rswift.StringResource(key: "profile.addPlace", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Профиль
      static let tabBarProfile = Rswift.StringResource(key: "tabBar.profile", tableName: "Localized", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Apple ID
      static func authAppleID(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("auth.appleID", tableName: "Localized", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localized", preferredLanguages: preferredLanguages) else {
          return "auth.appleID"
        }

        return NSLocalizedString("auth.appleID", tableName: "Localized", bundle: bundle, comment: "")
      }

      /// Value: Google
      static func authGoogle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("auth.google", tableName: "Localized", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localized", preferredLanguages: preferredLanguages) else {
          return "auth.google"
        }

        return NSLocalizedString("auth.google", tableName: "Localized", bundle: bundle, comment: "")
      }

      /// Value: iGid
      static func iGid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("iGid", tableName: "Localized", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localized", preferredLanguages: preferredLanguages) else {
          return "iGid"
        }

        return NSLocalizedString("iGid", tableName: "Localized", bundle: bundle, comment: "")
      }

      /// Value: Выберите поездку
      static func placesSelectRide(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("places.selectRide", tableName: "Localized", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localized", preferredLanguages: preferredLanguages) else {
          return "places.selectRide"
        }

        return NSLocalizedString("places.selectRide", tableName: "Localized", bundle: bundle, comment: "")
      }

      /// Value: Выйти
      static func profileGoOut(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile.goOut", tableName: "Localized", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localized", preferredLanguages: preferredLanguages) else {
          return "profile.goOut"
        }

        return NSLocalizedString("profile.goOut", tableName: "Localized", bundle: bundle, comment: "")
      }

      /// Value: Избранные поездки
      static func profileWishList(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile.wishList", tableName: "Localized", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localized", preferredLanguages: preferredLanguages) else {
          return "profile.wishList"
        }

        return NSLocalizedString("profile.wishList", tableName: "Localized", bundle: bundle, comment: "")
      }

      /// Value: Места
      static func tabBarPlaces(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tabBar.places", tableName: "Localized", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localized", preferredLanguages: preferredLanguages) else {
          return "tabBar.places"
        }

        return NSLocalizedString("tabBar.places", tableName: "Localized", bundle: bundle, comment: "")
      }

      /// Value: Назад
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel", tableName: "Localized", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localized", preferredLanguages: preferredLanguages) else {
          return "cancel"
        }

        return NSLocalizedString("cancel", tableName: "Localized", bundle: bundle, comment: "")
      }

      /// Value: Начните с помощью
      static func authGetStartedWith(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("auth.getStartedWith", tableName: "Localized", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localized", preferredLanguages: preferredLanguages) else {
          return "auth.getStartedWith"
        }

        return NSLocalizedString("auth.getStartedWith", tableName: "Localized", bundle: bundle, comment: "")
      }

      /// Value: Предложить поездку
      static func profileAddPlace(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile.addPlace", tableName: "Localized", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localized", preferredLanguages: preferredLanguages) else {
          return "profile.addPlace"
        }

        return NSLocalizedString("profile.addPlace", tableName: "Localized", bundle: bundle, comment: "")
      }

      /// Value: Профиль
      static func tabBarProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tabBar.profile", tableName: "Localized", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localized", preferredLanguages: preferredLanguages) else {
          return "tabBar.profile"
        }

        return NSLocalizedString("tabBar.profile", tableName: "Localized", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "LaunchScreenImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LaunchScreenImage' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
